{
  "_args": [
    [
      {
        "raw": "rollup@0.41.6",
        "scope": null,
        "escapedName": "rollup",
        "name": "rollup",
        "rawSpec": "0.41.6",
        "spec": "0.41.6",
        "type": "version"
      },
      "/Users/Marius/Dropbox/Privat/Projects/ByggStandard/node_modules/@ionic/app-scripts"
    ]
  ],
  "_from": "rollup@0.41.6",
  "_id": "rollup@0.41.6",
  "_inCache": true,
  "_location": "/rollup",
  "_nodeVersion": "7.2.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/rollup-0.41.6.tgz_1489639830949_0.21616668719798326"
  },
  "_npmUser": {
    "name": "rich_harris",
    "email": "richard.a.harris@gmail.com"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "rollup@0.41.6",
    "scope": null,
    "escapedName": "rollup",
    "name": "rollup",
    "rawSpec": "0.41.6",
    "spec": "0.41.6",
    "type": "version"
  },
  "_requiredBy": [
    "/@ionic/app-scripts"
  ],
  "_resolved": "https://registry.npmjs.org/rollup/-/rollup-0.41.6.tgz",
  "_shasum": "e0d05497877a398c104d816d2733a718a7a94e2a",
  "_shrinkwrap": null,
  "_spec": "rollup@0.41.6",
  "_where": "/Users/Marius/Dropbox/Privat/Projects/ByggStandard/node_modules/@ionic/app-scripts",
  "author": {
    "name": "Rich Harris"
  },
  "bin": {
    "rollup": "./bin/rollup"
  },
  "bugs": {
    "url": "https://github.com/rollup/rollup/issues"
  },
  "contributors": [
    {
      "name": "Oskar Segersv√§rd",
      "email": "victorystick@gmail.com"
    },
    {
      "name": "Bogdan Chadkin",
      "email": "trysound@yandex.ru"
    }
  ],
  "dependencies": {
    "source-map-support": "^0.4.0"
  },
  "description": "Next-generation ES6 module bundler",
  "devDependencies": {
    "acorn": "4.0.4",
    "buble": "^0.15.1",
    "chalk": "^1.1.3",
    "codecov.io": "^0.1.6",
    "console-group": "^0.3.1",
    "eslint": "^3.12.2",
    "eslint-plugin-import": "^2.2.0",
    "is-reference": "^1.0.0",
    "istanbul": "^0.4.3",
    "locate-character": "^2.0.0",
    "magic-string": "^0.15.2",
    "minimist": "^1.2.0",
    "mocha": "^3.0.0",
    "remap-istanbul": "^0.6.4",
    "require-relative": "^0.8.7",
    "rollup": "^0.39.0",
    "rollup-plugin-buble": "^0.13.0",
    "rollup-plugin-commonjs": "^7.0.0",
    "rollup-plugin-json": "^2.0.0",
    "rollup-plugin-node-resolve": "^2.0.0",
    "rollup-plugin-replace": "^1.1.0",
    "rollup-plugin-string": "^2.0.0",
    "sander": "^0.6.0",
    "source-map": "^0.5.6",
    "sourcemap-codec": "^1.3.0",
    "uglify-js": "^2.6.2"
  },
  "directories": {},
  "dist": {
    "shasum": "e0d05497877a398c104d816d2733a718a7a94e2a",
    "tarball": "https://registry.npmjs.org/rollup/-/rollup-0.41.6.tgz"
  },
  "files": [
    "dist",
    "bin/rollup",
    "README.md"
  ],
  "gitHead": "a96a923d631b9d2c471137542b9c4f578b8faa53",
  "homepage": "https://github.com/rollup/rollup",
  "jsnext:main": "dist/rollup.es.js",
  "keywords": [
    "modules",
    "bundler",
    "bundling",
    "es6",
    "optimizer"
  ],
  "license": "MIT",
  "main": "dist/rollup.js",
  "maintainers": [
    {
      "name": "eventualbuddha",
      "email": "me@brian-donovan.com"
    },
    {
      "name": "rich_harris",
      "email": "richard.a.harris@gmail.com"
    },
    {
      "name": "trysound",
      "email": "trysound@yandex.ru"
    },
    {
      "name": "victorystick",
      "email": "victorystick@gmail.com"
    }
  ],
  "module": "dist/rollup.es.js",
  "name": "rollup",
  "optionalDependencies": {},
  "readme": "# Rollup\n\n<p align=\"center\">\n  <a href=\"https://travis-ci.org/rollup/rollup\">\n    <img src=\"https://api.travis-ci.org/rollup/rollup.svg?branch=master\"\n         alt=\"build status\">\n  </a>\n  <a href=\"https://www.npmjs.com/package/rollup\">\n    <img src=\"https://img.shields.io/npm/v/rollup.svg\"\n         alt=\"npm version\">\n  </a>\n  <a href=\"https://github.com/rollup/rollup/blob/master/LICENSE.md\">\n    <img src=\"https://img.shields.io/npm/l/rollup.svg\"\n         alt=\"license\">\n  </a>\n  <a href=\"https://david-dm.org/rollup/rollup\">\n    <img src=\"https://david-dm.org/rollup/rollup/status.svg\"\n         alt=\"dependency status\">\n  </a>\n  <a href=\"https://codecov.io/github/rollup/rollup?branch=master\">\n    <img src=\"https://codecov.io/gh/rollup/rollup/branch/master/graph/badge.svg\" alt=\"Coverage via Codecov\" />\n  </a>\n  <a href='https://gitter.im/rollup/rollup?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge'>\n    <img src='https://badges.gitter.im/rollup/rollup.svg'\n         alt='Join the chat at https://gitter.im/rollup/rollup'>\n  </a>\n</p>\n\n## Overview\n\nRollup is a module bundler for JavaScript which compiles small pieces of code into a something larger and more complex, such as a library or application. It uses the new standardized format for code modules included in the ES6 revision of JavaScript, instead of previous idiosyncratic solutions such as CommonJS and AMD.\n\n## Quick Start Guide\n\nInstall with `npm install --global rollup`. Rollup can be used either through a [command line interface](https://github.com/rollup/rollup/wiki/Command-Line-Interface) with an optional configuration file, or else through its [JavaScript API](https://github.com/rollup/rollup/wiki/JavaScript-API). Run `rollup --help` to see the available options and parameters. The [starter project template](https://github.com/rollup/rollup-starter-project) demonstrates common configuration options, and more detailed instructions are available throughout the [user guide](http://rollupjs.org/guide/).\n\n### Commands\n\nThese commands assume the entry point to your application is named main.js, and that you'd like all imports compiled into a single file named bundle.js.\n\nFor browsers:\n\n```bash\n# compile to a <script> containing a self-executing function\n$ rollup main.js --format iife --output bundle.js\n```\n\nFor Node.js:\n\n```bash\n# compile to a CommonJS module\n$ rollup main.js --format cjs --output bundle.js\n```\n\nFor both browsers and Node.js:\n\n```bash\n# UMD format requires a bundle name\n$ rollup main.js --format umd --name \"myBundle\" --output bundle.js\n```\n\n## Why\n\nDeveloping software is usually easier if you break your project into smaller separate pieces, since that often removes unexpected interactions and dramatically reduces the complexity of the problems you'll need to solve, and simply writing smaller projects in the first place [isn't necessarily the answer](https://medium.com/@Rich_Harris/small-modules-it-s-not-quite-that-simple-3ca532d65de4). Unfortunately, JavaScript has not historically included this capability as a core feature in the language.\n\nThis finally changed with the ES6 revision of JavaScript, which includes a syntax for importing and exporting functions and data so they can be shared between separate scripts. The specification is now fixed, but it is not yet implemented in browsers or Node.js. Rollup allows you to write your code using the new module system, and will then compile it back down to existing supported formats such as CommonJS modules, AMD modules, and IIFE-style scripts. This means that you get to *write future-proof code*, and you also get the tremendous benefits of...\n\n## Tree Shaking\n\nIn addition to enabling the use of ES6 modules, Rollup also statically analyzes the code you are importing, and will exclude anything that isn't actually used. This allows you to build on top of existing tools and modules without adding extra dependencies or bloating the size of your project.\n\nFor example, with CommonJS, the *entire tool or library must be imported*.\n\n```js\n// import the entire utils object with CommonJS\nvar utils = require( 'utils' );\nvar query = 'Rollup';\n// use the ajax method of the utils object\nutils.ajax( 'https://api.example.com?search=' + query ).then( handleResponse );\n```\n\nBut with ES6 modules, instead of importing the whole `utils` object, we can just import the one `ajax` function we need:\n\n```js\n// import the ajax function with an ES6 import statement\nimport { ajax } from 'utils';\nvar query = 'Rollup';\n// call the ajax function\najax( 'https://api.example.com?search=' + query ).then( handleResponse );\n```\n\nBecause Rollup includes the bare minimum, it results in lighter, faster, and less complicated libraries and applications. Since this approach is based on explicit `import` and `export` statements, it is vastly more effective than simply running an automated minifier to detect unused variables in the compiled output code.\n\nES6 modules let you freely and seamlessly combine the most useful individual functions from your favorite libraries, without weighing down your project with all the other unused code. This will eventually be possible natively, but Rollup lets you do it today.\n\n## Compatibility\n\n### Importing CommonJS\n\nRollup can import existing CommonJS modules [through a plugin](https://github.com/rollup/rollup-plugin-commonjs).\n\n### Publishing ES6 Modules\n\nTo make sure your ES6 modules are immediately usable by tools that work with CommonJS such as Node.js and webpack, you can use Rollup to compile to UMD or CommonJS format, and then point to that compiled version with the `main` property in your `package.json` file. If your `package.json` file also has a `module` field, ES6-aware tools like Rollup and [webpack 2](https://webpack.js.org/) will [import the ES6 module version](https://github.com/rollup/rollup/wiki/pkg.module) directly.\n\n## Links\n\n- step-by-step [tutorial video series](https://code.lengstorf.com/learn-rollup-js/), with accompanying written walkthrough\n- miscellaneous issues in the [wiki](https://github.com/rollup/rollup/wiki)\n\n## License\n\n[MIT](https://github.com/rollup/rollup/blob/master/LICENSE.md)",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rollup/rollup.git"
  },
  "scripts": {
    "build": "git rev-parse HEAD > .commithash && rollup -c",
    "build:browser": "git rev-parse HEAD > .commithash && rollup -c rollup.config.browser.js",
    "build:cli": "rollup -c rollup.config.cli.js && chmod a+x bin/rollup",
    "ci": "npm run test-coverage && codecov < coverage/coverage-remapped.lcov",
    "lint": "eslint src browser test/test.js test/utils test/**/_config.js",
    "posttest-coverage": "remap-istanbul -i coverage/coverage-final.json -o coverage/coverage-remapped.json -b dist && remap-istanbul -i coverage/coverage-final.json -o coverage/coverage-remapped.lcov -t lcovonly -b dist && remap-istanbul -i coverage/coverage-final.json -o coverage/coverage-remapped -t html -b dist",
    "prepublish": "npm run lint && npm test && npm run build:browser",
    "pretest": "npm run build && npm run build:cli",
    "pretest-coverage": "npm run build",
    "test": "mocha",
    "test-coverage": "rm -rf coverage/* && istanbul cover --report json node_modules/.bin/_mocha -- -u exports -R spec test/test.js",
    "test:quick": "rollup -c && mocha",
    "watch": "rollup -c -w",
    "watch:browser": "rollup -c rollup.config.browser.js -w",
    "watch:cli": "rollup -c rollup.config.cli.js -w"
  },
  "version": "0.41.6"
}
