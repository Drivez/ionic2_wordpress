{
  "_args": [
    [
      {
        "raw": "rollup-pluginutils@2.0.1",
        "scope": null,
        "escapedName": "rollup-pluginutils",
        "name": "rollup-pluginutils",
        "rawSpec": "2.0.1",
        "spec": "2.0.1",
        "type": "version"
      },
      "/Users/Marius/Dropbox/Privat/Projects/ByggStandard/node_modules/@ionic/app-scripts"
    ]
  ],
  "_from": "rollup-pluginutils@2.0.1",
  "_id": "rollup-pluginutils@2.0.1",
  "_inCache": true,
  "_location": "/rollup-pluginutils",
  "_nodeVersion": "7.2.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/rollup-pluginutils-2.0.1.tgz_1483470610433_0.34335850714705884"
  },
  "_npmUser": {
    "name": "rich_harris",
    "email": "richard.a.harris@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "rollup-pluginutils@2.0.1",
    "scope": null,
    "escapedName": "rollup-pluginutils",
    "name": "rollup-pluginutils",
    "rawSpec": "2.0.1",
    "spec": "2.0.1",
    "type": "version"
  },
  "_requiredBy": [
    "/@ionic/app-scripts",
    "/rollup-plugin-commonjs"
  ],
  "_resolved": "https://registry.npmjs.org/rollup-pluginutils/-/rollup-pluginutils-2.0.1.tgz",
  "_shasum": "7ec95b3573f6543a46a6461bd9a7c544525d0fc0",
  "_shrinkwrap": null,
  "_spec": "rollup-pluginutils@2.0.1",
  "_where": "/Users/Marius/Dropbox/Privat/Projects/ByggStandard/node_modules/@ionic/app-scripts",
  "author": {
    "name": "Rich Harris",
    "email": "richard.a.harris@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/rollup/rollup-pluginutils/issues"
  },
  "dependencies": {
    "estree-walker": "^0.3.0",
    "micromatch": "^2.3.11"
  },
  "description": "Functionality commonly needed by Rollup plugins",
  "devDependencies": {
    "eslint": "^3.12.2",
    "mocha": "^3.2.0",
    "rollup": "^0.40.0",
    "rollup-plugin-buble": "^0.15.0"
  },
  "directories": {},
  "dist": {
    "shasum": "7ec95b3573f6543a46a6461bd9a7c544525d0fc0",
    "tarball": "https://registry.npmjs.org/rollup-pluginutils/-/rollup-pluginutils-2.0.1.tgz"
  },
  "files": [
    "src",
    "dist",
    "README.md"
  ],
  "gitHead": "1387dd324c5e23fd5aee40f7949268505c0e555a",
  "homepage": "https://github.com/rollup/rollup-pluginutils#readme",
  "jsnext:main": "dist/pluginutils.es.js",
  "keywords": [
    "rollup",
    "utils"
  ],
  "license": "MIT",
  "main": "dist/pluginutils.cjs.js",
  "maintainers": [
    {
      "name": "rich_harris",
      "email": "richard.a.harris@gmail.com"
    }
  ],
  "module": "dist/pluginutils.es.js",
  "name": "rollup-pluginutils",
  "optionalDependencies": {},
  "readme": "# rollup-pluginutils\n\nA set of functions commonly used by Rollup plugins.\n\n\n## Installation\n\n```bash\nnpm install --save rollup-pluginutils\n```\n\n\n## Usage\n\n### addExtension\n\n```js\nimport { addExtension } from 'rollup-pluginutils';\n\nexport default function myPlugin ( options = {} ) {\n  return {\n    resolveId ( code, id ) {\n      // only adds an extension if there isn't one already\n      id = addExtension( id ); // `foo` -> `foo.js`, `foo.js -> foo.js`\n      id = addExtension( id, '.myext' ); // `foo` -> `foo.myext`, `foo.js -> `foo.js`\n    }\n  };\n}\n```\n\n\n### attachScopes\n\nThis function attaches `Scope` objects to the relevant nodes of an AST. Each `Scope` object has a `scope.contains(name)` method that returns `true` if a given name is defined in the current scope or a parent scope.\n\nSee [rollup-plugin-inject](https://github.com/rollup/rollup-plugin-inject) or [rollup-plugin-commonjs](https://github.com/rollup/rollup-plugin-inject) for an example of usage.\n\n```js\nimport { attachScopes } from 'rollup-pluginutils';\nimport { parse } from 'acorn';\nimport { walk } from 'estree-walker';\n\nexport default function myPlugin ( options = {} ) {\n  return {\n    transform ( code ) {\n      const ast = parse( ast, {\n        ecmaVersion: 6,\n        sourceType: 'module'\n      });\n\n      let scope = attachScopes( ast, 'scope' );\n\n      walk( ast, {\n        enter ( node ) {\n          if ( node.scope ) scope = node.scope;\n\n          if ( !scope.contains( 'foo' ) ) {\n            // `foo` is not defined, so if we encounter it,\n            // we assume it's a global\n          }\n        },\n        leave ( node ) {\n          if ( node.scope ) scope = scope.parent;\n        }\n      });\n    }\n  };\n}\n```\n\n\n### createFilter\n\n```js\nimport { createFilter } from 'rollup-pluginutils';\n\nexport default function myPlugin ( options = {} ) {\n  // `options.include` and `options.exclude` can each be a minimatch\n  // pattern, or an array of minimatch patterns, relative to process.cwd()\n  var filter = createFilter( options.include, options.exclude );\n\n  return {\n    transform ( code, id ) {\n      // if `options.include` is omitted or has zero length, filter\n      // will return `true` by default. Otherwise, an ID must match\n      // one or more of the minimatch patterns, and must not match\n      // any of the `options.exclude` patterns.\n      if ( !filter( id ) ) return;\n\n      // proceed with the transformation...\n    }\n  };\n}\n```\n\n\n### makeLegalIdentifier\n\n```js\nimport { makeLegalIdentifier } from 'rollup-pluginutils';\n\nmakeLegalIdentifier( 'foo-bar' ); // 'foo_bar'\nmakeLegalIdentifier( 'typeof' ); // '_typeof'\n```\n\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rollup/rollup-pluginutils.git"
  },
  "scripts": {
    "build": "rollup -c",
    "prepublish": "npm test",
    "pretest": "npm run build",
    "test": "mocha"
  },
  "version": "2.0.1"
}
