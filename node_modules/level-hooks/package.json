{
  "_args": [
    [
      {
        "raw": "level-hooks@>=4.4.0 <5",
        "scope": null,
        "escapedName": "level-hooks",
        "name": "level-hooks",
        "rawSpec": ">=4.4.0 <5",
        "spec": ">=4.4.0 <5.0.0",
        "type": "range"
      },
      "/Users/Marius/Dropbox/Privat/Projects/ByggStandard/node_modules/level-sublevel"
    ]
  ],
  "_from": "level-hooks@>=4.4.0 <5.0.0",
  "_id": "level-hooks@4.5.0",
  "_inCache": true,
  "_location": "/level-hooks",
  "_npmUser": {
    "name": "dominictarr",
    "email": "dominic.tarr@gmail.com"
  },
  "_npmVersion": "1.4.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "level-hooks@>=4.4.0 <5",
    "scope": null,
    "escapedName": "level-hooks",
    "name": "level-hooks",
    "rawSpec": ">=4.4.0 <5",
    "spec": ">=4.4.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/level-sublevel"
  ],
  "_resolved": "https://registry.npmjs.org/level-hooks/-/level-hooks-4.5.0.tgz",
  "_shasum": "1b9ae61922930f3305d1a61fc4d83c8102c0dd93",
  "_shrinkwrap": null,
  "_spec": "level-hooks@>=4.4.0 <5",
  "_where": "/Users/Marius/Dropbox/Privat/Projects/ByggStandard/node_modules/level-sublevel",
  "author": {
    "name": "Dominic Tarr",
    "email": "dominic.tarr@gmail.com",
    "url": "http://bit.ly/dominictarr"
  },
  "bugs": {
    "url": "https://github.com/dominictarr/level-hooks/issues"
  },
  "dependencies": {
    "string-range": "~1.2"
  },
  "description": "pre/post hooks for leveldb",
  "devDependencies": {
    "level-test": "~1.4.0",
    "macgyver": "~1.9",
    "range-bucket": "0.0.0",
    "rimraf": "~2.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "1b9ae61922930f3305d1a61fc4d83c8102c0dd93",
    "tarball": "https://registry.npmjs.org/level-hooks/-/level-hooks-4.5.0.tgz"
  },
  "homepage": "https://github.com/dominictarr/level-hooks",
  "maintainers": [
    {
      "name": "dominictarr",
      "email": "dominic.tarr@gmail.com"
    }
  ],
  "name": "level-hooks",
  "optionalDependencies": {},
  "readme": "# Pre/Post hooks for leveldb\n\nIntercept put/delete/batch operations on levelup.\n\n## Warning - Breaking Changes\n \nThe API for implementing pre hooks has changed.\nInstead of mutating an array at once, the prehook\nis called on each change `hook(change, add)`\nand may call `add(_change)` to add a new item into the batch.\n\nAlso, attaching hooks to leveldb is now simpler\n``` js\nvar Hooks = require('level-hooks')\nHooks(db) //previously: Hooks()(db)\n```\n\n## Example\n\n``` js\nvar levelup   = require('levelup')\nvar timestamp = require('monotonic-timestamp')\nvar hooks     = require('level-hooks')\n\nlevelup(file, {createIfMissing: true}, function (err, db) {\n\n  //install hooks onto db.\n  hooks(db)\n\n  db.hooks.pre({start: '', end: '~'}, function (change, add) {\n    //change is same pattern as the an element in the batch array.\n    //add a log to record every put operation.\n    add({type: 'put', key: '~log-'+timestamp()+'-'+change.type, value: change.key})\n  })\n\n  //add a hook that responds after an operation has completed.\n  db.hooks.post(function (ch) {\n    //{type: 'put'|'del', key: ..., value: ...}\n  })\n\n})\n```\n\nUsed by [map-reduce](https://github.com/dominictarr/map-reduce) \nto make map-reduce durable across crashes!\n\n## API\n\n### rm = db.hooks.pre (range?, hook(change, add(op), batch))\n\nIf `prefix` is a `string` or `object` that defines the range the pre-hook triggers on.\nIf `prefix' is a string, then the hook only triggers on keys that _start_ with that \nstring. If the hook is an object it must be of form `{start: START, end: END}`\n\n`hook` is a function, and will be called on each item in the batch \n(if it was a `put` or `del`, it will be called on the change)\n`op` is always of the form `{key: key, value: value, type:'put' | 'del'}`\n\nPass additional changes to `add` to add them to the batch.\nIf add is passed a string as the second argument it will prepend that prefix\nto any keys you add.\n\nYou can check what opperations are currently in the batch with the third argument.\nDo not modify the `batch` directly, instead use `add`\n\nTo veto (remove) the current change call `add(false)`.\n\n`db.hooks.pre` returns a function that will remove the hook when called.\n\n#### unsafe mode\n\nnormally, pre hooks prevent you from inserting into the hooked range\nwhen the hook is triggered. However, sometimes you do need to do this.\nIn those cases, pass in a range with `{start: START, end: END, safe: false}`\nand level-hooks will not error. If you use this option, your hook must\navoid triggering in a loop itself.\n\n### rm = db.hooks.post (range?, hook)\n\nPost hooks do not offer any chance to change the value.\nbut do take a range option, just like `pre`\n\n`db.hooks.post` returns a function that will remove the hook when called.\n\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/level-hooks.git"
  },
  "scripts": {
    "test": "set -e; for t in test/*.js; do node $t; done"
  },
  "version": "4.5.0"
}
